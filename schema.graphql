schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""An object with globally unique ID"""
interface Node {
  """A globally unique identifier"""
  id: ID!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "text_post"
  """
  delete_text_post(
    """filter the rows which have to be deleted"""
    where: text_post_bool_exp!
  ): text_post_mutation_response

  """
  delete single row from the table: "text_post"
  """
  delete_text_post_by_pk(uuid: uuid!): text_post

  """
  delete data from the table: "user"
  """
  delete_user(
    """filter the rows which have to be deleted"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  delete single row from the table: "user"
  """
  delete_user_by_pk(uuid: uuid!): user

  """
  insert data into the table: "text_post"
  """
  insert_text_post(
    """the rows to be inserted"""
    objects: [text_post_insert_input!]!

    """on conflict condition"""
    on_conflict: text_post_on_conflict
  ): text_post_mutation_response

  """
  insert a single row into the table: "text_post"
  """
  insert_text_post_one(
    """the row to be inserted"""
    object: text_post_insert_input!

    """on conflict condition"""
    on_conflict: text_post_on_conflict
  ): text_post

  """
  insert data into the table: "user"
  """
  insert_user(
    """the rows to be inserted"""
    objects: [user_insert_input!]!

    """on conflict condition"""
    on_conflict: user_on_conflict
  ): user_mutation_response

  """
  insert a single row into the table: "user"
  """
  insert_user_one(
    """the row to be inserted"""
    object: user_insert_input!

    """on conflict condition"""
    on_conflict: user_on_conflict
  ): user

  """
  update data of the table: "text_post"
  """
  update_text_post(
    """sets the columns of the filtered rows to the given values"""
    _set: text_post_set_input

    """filter the rows which have to be updated"""
    where: text_post_bool_exp!
  ): text_post_mutation_response

  """
  update single row of the table: "text_post"
  """
  update_text_post_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: text_post_set_input
    pk_columns: text_post_pk_columns_input!
  ): text_post

  """
  update data of the table: "user"
  """
  update_user(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input

    """filter the rows which have to be updated"""
    where: user_bool_exp!
  ): user_mutation_response

  """
  update single row of the table: "user"
  """
  update_user_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: user_set_input
    pk_columns: user_pk_columns_input!
  ): user
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  node(
    """A globally unique id"""
    id: ID!
  ): Node

  """
  fetch data from the table: "text_post"
  """
  text_post_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [text_post_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [text_post_order_by!]

    """filter the rows returned"""
    where: text_post_bool_exp
  ): text_postConnection!

  """
  fetch data from the table: "user"
  """
  user_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [user_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): userConnection!
}

type subscription_root {
  node(
    """A globally unique id"""
    id: ID!
  ): Node

  """
  fetch data from the table: "text_post"
  """
  text_post_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [text_post_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [text_post_order_by!]

    """filter the rows returned"""
    where: text_post_bool_exp
  ): text_postConnection!

  """
  fetch data from the table: "user"
  """
  user_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [user_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [user_order_by!]

    """filter the rows returned"""
    where: user_bool_exp
  ): userConnection!
}

"""
columns and relationships of "text_post"
"""
type text_post implements Node {
  """An object relationship"""
  author: user!
  author_id: uuid!
  content: String!
  created_at: timestamptz!
  id: ID!
  updated_at: timestamptz!
  uuid: uuid!
}

"""
A Relay connection object on "text_post"
"""
type text_postConnection {
  edges: [text_postEdge!]!
  pageInfo: PageInfo!
}

type text_postEdge {
  cursor: String!
  node: text_post!
}

"""
aggregated selection of "text_post"
"""
type text_post_aggregate {
  aggregate: text_post_aggregate_fields
  nodes: [text_post!]!
}

"""
aggregate fields of "text_post"
"""
type text_post_aggregate_fields {
  count(columns: [text_post_select_column!], distinct: Boolean): Int!
  max: text_post_max_fields
  min: text_post_min_fields
}

"""
order by aggregate values of table "text_post"
"""
input text_post_aggregate_order_by {
  count: order_by
  max: text_post_max_order_by
  min: text_post_min_order_by
}

"""
input type for inserting array relation for remote table "text_post"
"""
input text_post_arr_rel_insert_input {
  data: [text_post_insert_input!]!

  """on conflict condition"""
  on_conflict: text_post_on_conflict
}

"""
Boolean expression to filter rows from the table "text_post". All fields are combined with a logical 'AND'.
"""
input text_post_bool_exp {
  _and: [text_post_bool_exp!]
  _not: text_post_bool_exp
  _or: [text_post_bool_exp!]
  author: user_bool_exp
  author_id: uuid_comparison_exp
  content: String_comparison_exp
  created_at: timestamptz_comparison_exp
  updated_at: timestamptz_comparison_exp
  uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "text_post"
"""
enum text_post_constraint {
  """unique or primary key constraint"""
  text_post_pkey
}

"""
input type for inserting data into table "text_post"
"""
input text_post_insert_input {
  author: user_obj_rel_insert_input
  author_id: uuid
  content: String
  created_at: timestamptz
  updated_at: timestamptz
  uuid: uuid
}

"""aggregate max on columns"""
type text_post_max_fields {
  author_id: uuid
  content: String
  created_at: timestamptz
  updated_at: timestamptz
  uuid: uuid
}

"""
order by max() on columns of table "text_post"
"""
input text_post_max_order_by {
  author_id: order_by
  content: order_by
  created_at: order_by
  updated_at: order_by
  uuid: order_by
}

"""aggregate min on columns"""
type text_post_min_fields {
  author_id: uuid
  content: String
  created_at: timestamptz
  updated_at: timestamptz
  uuid: uuid
}

"""
order by min() on columns of table "text_post"
"""
input text_post_min_order_by {
  author_id: order_by
  content: order_by
  created_at: order_by
  updated_at: order_by
  uuid: order_by
}

"""
response of any mutation on the table "text_post"
"""
type text_post_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [text_post!]!
}

"""
on conflict condition type for table "text_post"
"""
input text_post_on_conflict {
  constraint: text_post_constraint!
  update_columns: [text_post_update_column!]! = []
  where: text_post_bool_exp
}

"""Ordering options when selecting data from "text_post"."""
input text_post_order_by {
  author: user_order_by
  author_id: order_by
  content: order_by
  created_at: order_by
  updated_at: order_by
  uuid: order_by
}

"""primary key columns input for table: text_post"""
input text_post_pk_columns_input {
  uuid: uuid!
}

"""
select columns of table "text_post"
"""
enum text_post_select_column {
  """column name"""
  author_id

  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  updated_at

  """column name"""
  uuid
}

"""
input type for updating data in table "text_post"
"""
input text_post_set_input {
  author_id: uuid
  content: String
  created_at: timestamptz
  updated_at: timestamptz
  uuid: uuid
}

"""
update columns of table "text_post"
"""
enum text_post_update_column {
  """column name"""
  author_id

  """column name"""
  content

  """column name"""
  created_at

  """column name"""
  updated_at

  """column name"""
  uuid
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "user"
"""
type user implements Node {
  created_at: timestamptz!
  display: String
  email: String!
  id: ID!
  password: String!
  slug: String!

  """An array relationship"""
  text_posts(
    """distinct select on columns"""
    distinct_on: [text_post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [text_post_order_by!]

    """filter the rows returned"""
    where: text_post_bool_exp
  ): [text_post!]!

  """An aggregate relationship"""
  text_posts_aggregate(
    """distinct select on columns"""
    distinct_on: [text_post_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [text_post_order_by!]

    """filter the rows returned"""
    where: text_post_bool_exp
  ): text_post_aggregate!

  """An array relationship connection"""
  text_posts_connection(
    after: String
    before: String

    """distinct select on columns"""
    distinct_on: [text_post_select_column!]
    first: Int
    last: Int

    """sort the rows by one or more columns"""
    order_by: [text_post_order_by!]

    """filter the rows returned"""
    where: text_post_bool_exp
  ): text_postConnection!
  uuid: uuid!
}

"""
A Relay connection object on "user"
"""
type userConnection {
  edges: [userEdge!]!
  pageInfo: PageInfo!
}

type userEdge {
  cursor: String!
  node: user!
}

"""
Boolean expression to filter rows from the table "user". All fields are combined with a logical 'AND'.
"""
input user_bool_exp {
  _and: [user_bool_exp!]
  _not: user_bool_exp
  _or: [user_bool_exp!]
  created_at: timestamptz_comparison_exp
  display: String_comparison_exp
  email: String_comparison_exp
  password: String_comparison_exp
  slug: String_comparison_exp
  text_posts: text_post_bool_exp
  uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "user"
"""
enum user_constraint {
  """unique or primary key constraint"""
  user_email_key

  """unique or primary key constraint"""
  user_pkey

  """unique or primary key constraint"""
  user_slug_key
}

"""
input type for inserting data into table "user"
"""
input user_insert_input {
  created_at: timestamptz
  display: String
  email: String
  password: String
  slug: String
  text_posts: text_post_arr_rel_insert_input
  uuid: uuid
}

"""
response of any mutation on the table "user"
"""
type user_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [user!]!
}

"""
input type for inserting object relation for remote table "user"
"""
input user_obj_rel_insert_input {
  data: user_insert_input!

  """on conflict condition"""
  on_conflict: user_on_conflict
}

"""
on conflict condition type for table "user"
"""
input user_on_conflict {
  constraint: user_constraint!
  update_columns: [user_update_column!]! = []
  where: user_bool_exp
}

"""Ordering options when selecting data from "user"."""
input user_order_by {
  created_at: order_by
  display: order_by
  email: order_by
  password: order_by
  slug: order_by
  text_posts_aggregate: text_post_aggregate_order_by
  uuid: order_by
}

"""primary key columns input for table: user"""
input user_pk_columns_input {
  uuid: uuid!
}

"""
select columns of table "user"
"""
enum user_select_column {
  """column name"""
  created_at

  """column name"""
  display

  """column name"""
  email

  """column name"""
  password

  """column name"""
  slug

  """column name"""
  uuid
}

"""
input type for updating data in table "user"
"""
input user_set_input {
  created_at: timestamptz
  display: String
  email: String
  password: String
  slug: String
  uuid: uuid
}

"""
update columns of table "user"
"""
enum user_update_column {
  """column name"""
  created_at

  """column name"""
  display

  """column name"""
  email

  """column name"""
  password

  """column name"""
  slug

  """column name"""
  uuid
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

